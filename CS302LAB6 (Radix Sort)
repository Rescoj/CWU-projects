import java.io.*;
import java.util.*;
public class Lab6
{

    /**
     * Problem: Sort multi-digit integers (with n total digits) in O(n) time.
     * (Technically, it is O(n * b) time. However, since our base b = 128 is
     constant, it is O(n).)
     */

    private static void problem(byte[][] arr)
    {

        //declaring variables
        byte[][] copy = new byte[arr.length][128];
        byte[] swap;

        //copying input into secondary array 'copy' for manipulation
        for (int i = 0; i < arr.length; i++)
        {
            copy[i] = Arrays.copyOf(arr[i],128);
        }

        //sorts input array by length of digits, which is needed as reference when transferring copy array into output
        for (int i = 0; i < arr.length - 1; i++)
        {
            if (arr[i].length > arr[i+1].length)
            {
                swap = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] = swap;
                i = -1;
            }
        }

        //radix sort with sub-bubble sort implementation
        for (int i = 0; i < 128; i++)
        {
            for (int j = 0; j < copy.length - 1; j++)
            {
                if (copy[j][i] > copy[j+1][i])
                {
                    swap = copy[j];
                    copy[j] = copy[j+1];
                    copy[j+1] = swap;
                    j = -1;
                }
            }
        }

        //transferring sorted array into original array for output
        for (int i = 0; i < copy.length; i++)
        {
            arr[i] = Arrays.copyOfRange(copy[i],0,arr[i].length);
        }

    }
    // ---------------------------------------------------------------------
// Do not change any of the code below!
    private static final int LabNo = 6;
    private static final Random rng = new Random(654321);
    private static boolean testProblem(byte[][] testCase)
    {
        byte[][] numbersCopy = new byte[testCase.length][];
// Create copy.
        for (int i = 0; i < testCase.length; i++)
        {
            numbersCopy[i] = testCase[i].clone();
        }
// Sort
        problem(testCase);
        Arrays.sort(numbersCopy, new numberComparator());
// Compare if both equal
        if (testCase.length != numbersCopy.length)
        {
            return false;
        }
        for (int i = 0; i < testCase.length; i++)
        {
            if (testCase[i].length != numbersCopy[i].length)
            {
                return false;
            }
            for (int j = 0; j < testCase[i].length; j++)
            {
                if (testCase[i][j] != numbersCopy[i][j])
                {
                    return false;
                }
            }
        }
        return true;
    }
    // Very bad way of sorting.
    private static class numberComparator implements Comparator<byte[]>
    {
        @Override
        public int compare(byte[] n1, byte[] n2)
        {
// Ensure equal length
            if (n1.length < n2.length)
            {
                byte[] tmp = new byte[n2.length];
                for (int i = 0; i < n1.length; i++)
                {
                    tmp[i] = n1[i];
                }
                n1 = tmp;
            }
            if (n1.length > n2.length)
            {
                byte[] tmp = new byte[n1.length];
                for (int i = 0; i < n2.length; i++)
                {
                    tmp[i] = n2[i];
                }
                n2 = tmp;
            }
// Compare digit by digit.
            for (int i = n1.length - 1; i >=0; i--)
            {
                if (n1[i] < n2[i]) return -1;
                if (n1[i] > n2[i]) return 1;
            }
            return 0;
        }
    }
    public static void main(String args[])
    {
        System.out.println("CS 302 -- Lab " + LabNo);
        testProblems();
    }
    private static void testProblems()
    {
        int noOfLines = 10000;
        System.out.println("-- -- -- -- --");
        System.out.println(noOfLines + " test cases.");
        boolean passedAll = true;
        for (int i = 1; i <= noOfLines; i++)
        {
            byte[][] testCase = createTestCase(i);
            boolean passed = false;
            boolean exce = false;
            try
            {
                passed = testProblem(testCase);
            }
            catch (Exception ex)
            {
                System.out.println(ex);
                passed = false;
                exce = true;
            }
            if (!passed)
            {
                System.out.println("Test " + i + " failed!" + (exce ? "(Exception)" : ""));
                passedAll = false;
                break;
            }
        }
        if (passedAll)
        {
            System.out.println("All test passed.");
        }
    }
    private static byte[][] createTestCase(int testNo)
    {
        int maxSize = Math.min(100, testNo) + 5;
        int size = rng.nextInt(maxSize) + 5;
        byte[][] numbers = new byte[size][];
        for (int i = 0; i < size; i++)
        {
            int digits = rng.nextInt(maxSize) + 1;
            numbers[i] = new byte[digits];
            for (int j = 0; j < digits - 1; j++)
            {
                numbers[i][j] = (byte)rng.nextInt(128);
            }
// Ensures that the most significant digit is not 0.
            numbers[i][digits - 1] = (byte)(rng.nextInt(127) + 1);
        }
        return numbers;
    }
}
